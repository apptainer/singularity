#!/singularity/test
# oci command tests

source ${SOURCEDIR}/tests/scripts/common.func

checkContainerState() {
    state=$2
    containerID=$1
    sleep 0.2
    status=$(${SUDO} singularity oci state ${containerID} | parse-json "{{.status}}")
    test-match "OciState-${state}" "${state}" "${status}"
}

bundle=`create-tmpdir`
image=`get-test-image`
containerID=`uuidgen`

expect-exit 0   "OciMount"                  ${SUDO} singularity oci mount ${image} ${bundle}

# override generated configuration with the default one, need terminal set to true
sudo cp ${SOURCEDIR}/tests/scripts/oci/testdata/config.json ${bundle}/config.json

expect-exit 0   "OciCreate"                 ${SUDO} singularity oci create -b ${bundle} ${containerID}

checkContainerState ${containerID} "created"

expect-exit 0   "OciStart"                  ${SUDO} singularity oci start ${containerID}

checkContainerState ${containerID} "running"

expect-exit 255 "OciStartAlreadyStarted"    ${SUDO} singularity oci start ${containerID}

expect-exit 0   "OciExecId"                 ${SUDO} singularity oci exec ${containerID} id

expect-exit 0   "OciKill"                   ${SUDO} singularity oci kill ${containerID} KILL

checkContainerState ${containerID} "stopped"

expect-exit 0   "OciDelete"                 ${SUDO} singularity oci delete ${containerID}
expect-exit 255 "OciStateAfterDelete"       ${SUDO} singularity oci state ${containerID}
expect-exit 255 "OciKillAfterDelete"        ${SUDO} singularity oci kill ${containerID}
expect-exit 255 "OciStartAfterDelete"       ${SUDO} singularity oci start ${containerID}
expect-exit 0   "OciUmount"                 ${SUDO} singularity oci umount ${bundle}