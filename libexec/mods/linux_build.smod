#!/bin/bash
# 
# Copyright (c) 2015-2016, Gregory M. Kurtzer. All rights reserved.
# 
# “Singularity” Copyright (c) 2016, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of any
# required approvals from the U.S. Dept. of Energy).  All rights reserved.
# 
# This software is licensed under a customized 3-clause BSD license.  Please
# consult LICENSE file distributed with the sources of this project regarding
# your rights to use or distribute this software.
# 
# NOTICE.  This Software was developed under funding from the U.S. Department of
# Energy and the U.S. Government consequently retains certain rights. As such,
# the U.S. Government has been granted for itself and others acting on its
# behalf a paid-up, nonexclusive, irrevocable, worldwide license in the Software
# to reproduce, distribute copies to the public, prepare derivative works, and
# perform publicly and display publicly, and to permit other to do so. 
# 
# 

# Things that should always exist in a Singularity container
DIRS="/home /tmp /etc /root /dev /proc /sys /var/tmp"
EMPTY_FILES="/etc/mtab /etc/resolv.conf /etc/nsswitch.conf /etc/hosts"
DEVS="/dev/null /dev/zero /dev/random /dev/urandom"
TMP_REAL_FILES="/etc/resolv.conf /etc/hosts"


SanityCheck() {
    return 0
}

Setup() {
    return 0
}

Bootstrap() {
    if [ ! -f "$SINGULARITY_TMPDIR/type" ]; then
        echo "Bootstrap: You must first call 'DistType'!" >&2
        exit 5
    fi

}

InstallPkgs() {
    if [ ! -f "$SINGULARITY_TMPDIR/type" ]; then
        echo "InstallPkgs: You must first call 'DistType'!" >&2
        exit 5
    fi
    return 0
}

Cleanup() {
    if [ ! -f "$SINGULARITY_TMPDIR/type" ]; then
        echo "Cleanup: You must first call 'DistType'!" >&2
        exit 5
    fi
    return 0
}


DistType() {
    TYPE="$1"

    if [ -z "$TYPE" ]; then
        echo "DistType: Requires an argument!" 2>&2
        exit 1
    fi

    if [ -f "$SINGULARITY_libexecdir/singularity/mods/linux_build_$TYPE.smod" ]; then
        . "$SINGULARITY_libexecdir/singularity/mods/linux_build_$TYPE.smod"
    else
        echo "DistType: Unrecognized Distribution type: $TYPE" >&2
        exit 255
    fi

    echo "$TYPE" > "$SINGULARITY_TMPDIR/type"

    return 0
}

MirrorURL() {
    MIRROR="$1"
    export MIRROR

    return 0
}

OSVersion() {
    VERSION="$1"
    export VERSION

    return 0
}

InstallFile() {
    SOURCE="$1"
    DEST="$2"

    if [ -z "$SOURCE" ]; then
        echo "InstallFile: Must be called with a source file!" >&2
        return 1
    fi

    if [ ! -e "$SOURCE" ]; then
        echo "InstallFile: No such file or directory ($SOURCE)" >&2
        return 1
    fi

    if [ -z "$DEST" ]; then
        DEST="$SOURCE"
    fi

    DEST_DIR=`dirname "$DEST"`

    if [ ! -d "$SINGULARITY_BUILD_ROOT/$DEST_DIR" ]; then
        mkdir -p "$SINGULARITY_BUILD_ROOT/$DEST_DIR"
    fi

    cp -rap "$SOURCE" "$SINGULARITY_BUILD_ROOT/$DEST"
    return 0
}


PreSetup() {
    for i in $DIRS; do
        if [ ! -d "$SINGULARITY_BUILD_ROOT/$i" ]; then
            mkdir -p "$SINGULARITY_BUILD_ROOT/$i"
        fi
    done

    for i in $TMP_REAL_FILES; do
        cp "$i" "$SINGULARITY_BUILD_ROOT/$i"
    done

    for i in $DEVS; do
        if [ ! -e "$SINGULARITY_BUILD_ROOT/$i" ]; then
            cp -a "$i" "$SINGULARITY_BUILD_ROOT/$i"
        fi
    done

    return 0
}

RunScript() {
    if [ -z "$RAN_RUNSCRIPT" ]; then
        echo '#!/bin/sh'    > "$SINGULARITY_BUILD_ROOT/singularity"
        echo                >> "$SINGULARITY_BUILD_ROOT/singularity"

        grep "^RunScript " "$SINGULARITY_BUILDDEF" | sed -e 's/^RunScript //' >> "$SINGULARITY_BUILD_ROOT/singularity"

        chmod +x "$SINGULARITY_BUILD_ROOT/singularity"

        RAN_RUNSCRIPT=1
    fi

    return 0
}


RunCmd() {
    if ! __runcmd "$@"; then
        message ERROR "Aborting...\n"
        exit 1
    fi

    return 0
}


Finalize() {
    for i in $EMPTY_FILES; do
        if [ ! -f "$SINGULARITY_BUILD_ROOT/$i" ]; then
            DIRNAME=`dirname "$i"`
            if [ -e "$SINGULARITY_BUILD_ROOT/$i" ]; then
                rm -rf "$SINGULARITY_BUILD_ROOT/$i"
            fi
            if [ ! -d "$DIRNAME" ]; then
                mkdir -m 755 -p "$DIRNAME"
            fi
            > "$SINGULARITY_BUILD_ROOT/$i"
        fi
    done

    if [ -L "$SINGULARITY_BUILD_ROOT/etc/mtab" ]; then
        # Just incase it exists and is a link
        rm -f "$SINGULARITY_BUILD_ROOT/etc/mtab"
    fi
    echo "singularity / rootfs rw 0 0" > "$SINGULARITY_BUILD_ROOT/etc/mtab"
}


__runcmd() {
    CMD="$1"
    shift

    echo "+ $CMD $*" 1>&2

    # Running command through /usr/bin/env -i to sanitize the environment
    chroot "$SINGULARITY_BUILD_ROOT" /usr/bin/env -i PATH="$PATH" "$CMD" "$@"

    return $?
}


__mountproc() {
    if [ -d "/proc" -a -d "$SINGULARITY_BUILD_ROOT/proc" ]; then
        mkdir -p -m 0755 "$SINGULARITY_BUILD_ROOT/proc"
    fi
    mount -t proc proc "$SINGULARITY_BUILD_ROOT/proc"

    return $?
}

__mountsys() {
    if [ ! -d "$SINGULARITY_BUILD_ROOT/sys" ]; then
        mkdir -p -m 0755 "$SINGULARITY_BUILD_ROOT/sys"
    fi
    mount -t sysfs sysfs "$SINGULARITY_BUILD_ROOT/sys"

    return $?
}

__mountdev() {
    if [ -d "/dev" -a -d "$SINGULARITY_BUILD_ROOT/dev" ]; then
        mkdir -p -m 0755 "$SINGULARITY_BUILD_ROOT/dev"
    fi
    mount --rbind "/dev/" "$SINGULARITY_BUILD_ROOT/dev"

    return $?
}


