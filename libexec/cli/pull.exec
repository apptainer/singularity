#!/bin/bash
# 
# Copyright (c) 2016-2017, Vanessa Sochat. All rights reserved. 
# 
# Copyright (c) 2016-2017, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of any
# required approvals from the U.S. Dept. of Energy).  All rights reserved.
# 
# This software is licensed under a customized 3-clause BSD license.  Please
# consult LICENSE file distributed with the sources of this project regarding
# your rights to use or distribute this software.
# 
# NOTICE.  This Software was developed under funding from the U.S. Department of
# Energy and the U.S. Government consequently retains certain rights. As such,
# the U.S. Government has been granted for itself and others acting on its
# behalf a paid-up, nonexclusive, irrevocable, worldwide license in the Software
# to reproduce, distribute copies to the public, prepare derivative works, and
# perform publicly and display publicly, and to permit other to do so. 
# 
 

## Basic sanity
if [ -z "$SINGULARITY_libexecdir" ]; then
    echo "Could not identify the Singularity libexecdir."
    exit 1
fi

## Load functions
if [ -f "$SINGULARITY_libexecdir/singularity/functions" ]; then
    . "$SINGULARITY_libexecdir/singularity/functions"
else
    echo "Error loading functions: $SINGULARITY_libexecdir/singularity/functions"
    exit 1
fi

while true; do
    case ${1:-} in
        -h|--help|help)
            if [ -e "$SINGULARITY_libexecdir/singularity/cli/$SINGULARITY_COMMAND.help" ]; then
                cat "$SINGULARITY_libexecdir/singularity/cli/$SINGULARITY_COMMAND.help"
            else
                message ERROR "No help exists for this command\n"
                exit 1
            fi
            exit
        ;;
        -n|--name|name)
            shift
            SHUB_CONTAINERNAME="${1:-}"
            export SHUB_CONTAINERNAME
            shift
        ;;
        -C|--commit|commit)
            shift
            if [ -z "${SINGULARITY_IMAGE+x}" ]; then
                SHUB_NAMEBYCOMMIT="yes"
                unset SHUB_NAMEBYHASH
                export SHUB_NAMEBYCOMMIT
            fi 
        ;;
        -H|--hash|hash)
            shift
            if [ -z "${SINGULARITY_IMAGE+x}" ]; then
                if [ -z "${SHUB_NAMEBYCOMMIT+x}" ]; then
                    SHUB_NAMEBYHASH="yes"
                    export SHUB_NAMEBYHASH
                fi
            fi 
        ;;
        -s|--size)
            shift
            SINGULARITY_IMAGESIZE="${1:-}"
            export SINGULARITY_IMAGESIZE
            shift
        ;;
        -F|--force)
            shift
            OVERWRITE=1
        ;;
        -*)
            message ERROR "Unknown option: ${1:-}\n"
            exit 1
        ;;
        *)
            break;
        ;;
    esac
done

if [ -z "${1:-}" ]; then
    if [ -e "$SINGULARITY_libexecdir/singularity/cli/$SINGULARITY_COMMAND.help" ]; then
        head -n 1 "$SINGULARITY_libexecdir/singularity/cli/$SINGULARITY_COMMAND.help"
    else
        message ERROR "To see usage summary, try: singularity help $SINGULARITY_COMMAND\n"
    fi
    exit 0
fi


RETVAL=0
SINGULARITY_CONTAINER="${1:-}"
if ! SINGULARITY_CONTENTS=`mktemp ${TMPDIR:-/tmp}/.singularity-layerfile.XXXXXX`; then
    message ERROR "Failed to create temporary directory\n"
    ABORT 255
fi

# If cache is set, set pull folder to it (first priority)
if [ -n "${SINGULARITY_CACHEDIR:-}" ]; then
    SINGULARITY_PULLFOLDER="$SINGULARITY_CACHEDIR"
else
    # Only set the pull folder to be $PWD if not set by user
    if [ ! -n "${SINGULARITY_PULLFOLDER:-}" ]; then
        SINGULARITY_PULLFOLDER="."
    fi
fi
shift

export SINGULARITY_CONTAINER SINGULARITY_PULLFOLDER SINGULARITY_CONTENTS

case "$SINGULARITY_CONTAINER" in
    docker://*)
        if [ -z "${SINGULARITY_IMAGE:-}" ]; then

            # If name given, use that
            if [ -n "${SHUB_CONTAINERNAME:-}" ]; then
                SINGULARITY_IMAGE=`basename "$SHUB_CONTAINERNAME.img" | sed -e 's/.img//g'`".img"   
            else
                SINGULARITY_IMAGE=`basename "$SINGULARITY_CONTAINER.img" | sed -e 's/:/-/g'`
            fi

            SINGULARITY_IMAGE="$SINGULARITY_PULLFOLDER/$SINGULARITY_IMAGE"
            message 3 "Singularity Image: $SINGULARITY_IMAGE"
            export SINGULARITY_IMAGE
        fi

        if [ -f "$SINGULARITY_IMAGE" ]; then
            if [ -n "${OVERWRITE:-}" ]; then
                message 2 "Removing existing file\n"
                rm -f "$SINGULARITY_IMAGE"
            else
                message ERROR "Image file exists, not overwriting.\n"
                exit 1
            fi
        fi

        if [ -z "${SINGULARITY_NOSUID:-}" -a -u "$SINGULARITY_libexecdir/singularity/bin/import-suid" ]; then
            IMPORT_BIN="$SINGULARITY_libexecdir/singularity/bin/import-suid"
        elif [ -x "$SINGULARITY_libexecdir/singularity/bin/import" ]; then
            IMPORT_BIN="$SINGULARITY_libexecdir/singularity/bin/import"
        else
            message ERROR "Could not locate the Singularity binary: $SINGULARITY_libexecdir/singularity/bin/import\n"
            exit 1
        fi

        if [ -z "${SINGULARITY_IMAGESIZE:-}" ]; then
            eval_abort $SINGULARITY_libexecdir/singularity/python/size.py

            SINGULARITY_IMAGESIZE=`cat "$SINGULARITY_CONTENTS"`
            if [ "$SINGULARITY_IMAGESIZE" -eq "$SINGULARITY_IMAGESIZE" ] 2>/dev/null; then
                export SINGULARITY_IMAGESIZE
            else
                message ERROR "Could not obtain the container size, try using --size\n"
                ABORT 255
            fi
        fi
        SINGULARITY_WRITABLE=1
        export SINGULARITY_WRITABLE

        if [ -z "${SINGULARITY_NOSUID:-}" -a -u "$SINGULARITY_libexecdir/singularity/bin/create-suid" ]; then
            eval_abort "$SINGULARITY_libexecdir/singularity/bin/create-suid"
        elif [ -x "$SINGULARITY_libexecdir/singularity/bin/create" ]; then
            eval_abort "$SINGULARITY_libexecdir/singularity/bin/create"
        else
            message ERROR "Could not locate the Singularity binary: $SINGULARITY_libexecdir/singularity/bin/create\n"
            exit 1
        fi

        cat /dev/null > "$SINGULARITY_CONTENTS"

        eval_abort "$SINGULARITY_libexecdir/singularity/python/import.py"
        message 1 "Importing: base Singularity environment\n"
        zcat $SINGULARITY_libexecdir/singularity/bootstrap-scripts/environment.tar | eval_abort "$IMPORT_BIN" || exit $?

        for i in `cat "$SINGULARITY_CONTENTS"`; do
            message 1 "Importing: $i\n"
            zcat "$i" | eval_abort "$IMPORT_BIN" || exit $?
        done

    ;;
    shub://*)
        
        eval_abort $SINGULARITY_libexecdir/singularity/python/pull.py
        RETVAL=$?

        SINGULARITY_IMAGE=`cat $SINGULARITY_CONTENTS`
    ;;
    *)
        message ERROR "pull is only supported for docker and shub URIs\n"
        exit 255
    ;;
esac

rm -f "$SINGULARITY_CONTENTS"

if [ $RETVAL -eq 0 -a -f "$SINGULARITY_IMAGE" ]; then
    chmod +x "$SINGULARITY_IMAGE"
    echo "Done. Container is at: $SINGULARITY_IMAGE"
else
    message ERROR "pulling container failed!\n"
fi

exit $RETVAL
