#!/bin/sh -
#
# Singularity core libs system configuration detection
#
set -e

makecond="$builddir/Makefile.cond"
echo "" > $makecond

config_add_def PACKAGE_NAME \"singularity\"
config_add_def PACKAGE_TARNAME \"singularity\"
config_add_def PACKAGE_VERSION \"3.0.0\"
config_add_def PACKAGE_STRING \"singularity 3.0.0\"
config_add_def PACKAGE_BUGREPORT \"support@sylabs.io\"
config_add_def PACKAGE_URL \"\"

config_add_def BUILDDIR \"$builddir\"
config_add_def PREFIX \"$prefix\"
config_add_def EXECPREFIX PREFIX
config_add_def BINDIR EXECPREFIX \"/bin\"
config_add_def LIBEXECDIR EXECPREFIX \"/libexec\"
config_add_def SBINDIR LIBEXECDIR \"/singularity/bin\"
config_add_def DATAROOTDIR PREFIX \"/share\"
config_add_def DATADIR DATAROOTDIR
config_add_def SYSCONFDIR PREFIX \"/etc\"
config_add_def SHAREDSTARTEDIR PREFIX \"/com\"
config_add_def LOCALSTATEDIR PREFIX \"/var\"
config_add_def INCLUDEDIR PREFIX \"/include\"
config_add_def OLDINCLUDEDIR \"/usr/include\"
config_add_def DOCDIR DATAROOTDIR \"/doc/\" PACKAGE_TARNAME
config_add_def INFODIR DATAROOTDIR \"/info\"
config_add_def HTMLDIR DOCDIR
config_add_def DVIDIR DOCDIR
config_add_def PDFDIR DOCDIR
config_add_def PSDIR DOCDIR
config_add_def LIBDIR EXECPREFIX \"/lib\"
config_add_def LOCALEDIR DATAROOTDIR \"/locale\"
config_add_def MANDIR DATAROOTDIR \"/man\"
config_add_def SINGULARITY_CONFDIR SYSCONFDIR \"/singularity\"
config_add_def CAPABILITY_FILE SINGULARITY_CONFDIR \"/capability.json\"

# config_add_def SINGULARITY_USERNS 1
# config_add_def DISABLE_SUID 1

config_add_def CONTAINER_MOUNTDIR LOCALSTATEDIR \"/singularity/mnt/container\"
config_add_def CONTAINER_FINALDIR LOCALSTATEDIR \"/singularity/mnt/final\"
config_add_def CONTAINER_OVERLAY LOCALSTATEDIR \"/singularity/mnt/overlay\"
config_add_def SESSIONDIR LOCALSTATEDIR \"/singularity/mnt/session\"

########################
# git version 
########################
if BRANCH=`git rev-parse --abbrev-ref HEAD 2>/dev/null`; then
    if HASH=`git rev-parse --short HEAD 2>/dev/null`; then
        config_add_def GIT_VERSION \"$BRANCH.$HASH\"
    else
        config_add_def GIT_VERSION \"$BRANCH\"
    fi
else
    config_add_def GIT_VERSION \"dist\"
fi


########################
# ns: CLONE_NEWPID
########################
printf " checking: namespace: CLONE_NEWPID... "
if ! printf "#define _GNU_SOURCE\n#include <sched.h>\nint main() { unshare(CLONE_NEWPID); }" | \
   $tgtcc -x c -o /dev/null - >/dev/null 2>&1; then
	echo "no"
else
	echo "yes"
	config_add_def NS_CLONE_NEWPID 1
fi

########################
# ns: CLONE_FS
########################
printf " checking: namespace: CLONE_FS... "
if ! printf "#define _GNU_SOURCE\n#include <sched.h>\nint main() { unshare(CLONE_FS); }" | \
   $tgtcc -x c -o /dev/null - >/dev/null 2>&1; then
	echo "no"
else
	echo "yes"
	config_add_def NS_CLONE_FS 1
fi

########################
# ns: CLONE_NEWNS
########################
printf " checking: namespace: CLONE_NEWNS... "
if ! printf "#define _GNU_SOURCE\n#include <sched.h>\nint main() { unshare(CLONE_NEWNS); }" | \
   $tgtcc -x c -o /dev/null - >/dev/null 2>&1; then
	echo "no"
	echo
	echo "This host does not support the CLONE_NEWNS (mount) namespace flag! You"
	echo "really really really don't want to run Singularity containers without a"
	echo "Separate mount name namespace!"
	echo
	exit 2
else
	echo "yes"
	config_add_def NS_CLONE_NEWNS 1
fi

########################
# ns: CLONE_NEWUSER
########################
printf " checking: namespace: CLONE_NEWUSER... "
if ! printf "#define _GNU_SOURCE\n#include <sched.h>\nint main() { unshare(CLONE_NEWUSER); }" | \
   $tgtcc -x c -o /dev/null - >/dev/null 2>&1; then
	echo "no"
else
	echo "yes"
	config_add_def NS_CLONE_NEWUSER 1
fi

########################
# ns: CLONE_NEWIPC
########################
printf " checking: namespace: CLONE_NEWIPC... "
if ! printf "#define _GNU_SOURCE\n#include <sched.h>\nint main() { unshare(CLONE_NEWIPC); }" | \
   $tgtcc -x c -o /dev/null - >/dev/null 2>&1; then
	echo "no"
else
	echo "yes"
	config_add_def NS_CLONE_NEWIPC 1
fi

########################
# ns: CLONE_NEWNET
########################
printf " checking: namespace: CLONE_NEWNET... "
if ! printf "#define _GNU_SOURCE\n#include <sched.h>\nint main() { unshare(CLONE_NEWNET); }" | \
   $tgtcc -x c -o /dev/null - >/dev/null 2>&1; then
	echo "no"
else
	echo "yes"
	config_add_def NS_CLONE_NEWNET 1
fi

########################
# ns: CLONE_NEWUTS
########################
printf " checking: namespace: CLONE_NEWUTS... "
if ! printf "#define _GNU_SOURCE\n#include <sched.h>\nint main() { unshare(CLONE_NEWUTS); }" | \
   $tgtcc -x c -o /dev/null - >/dev/null 2>&1; then
	echo "no"
else
	echo "yes"
	config_add_def NS_CLONE_NEWUTS 1
fi

########################
# ns: CLONE_NEWCGROUP
########################
printf " checking: namespace: CLONE_NEWCGROUP... "
if ! printf "#define _GNU_SOURCE\n#include <sched.h>\nint main() { unshare(CLONE_NEWCGROUP); }" | \
   $tgtcc -x c -o /dev/null - >/dev/null 2>&1; then
    echo "no"
else
    echo "yes"
    config_add_def NS_CLONE_NEWCGROUP 1
fi

########################
# feature: NO_NEW_PRIVS
########################
printf " checking: feature: NO_NEW_PRIVS... "
nnp_c=`mktemp -t nnp_c_XXXXXX`
cat > $nnp_c << "EOF"
#include <sys/prctl.h>
#ifndef PR_SET_NO_NEW_PRIVS
# define PR_SET_NO_NEW_PRIVS 38
# define PR_GET_NO_NEW_PRIVS 39
#endif
int main() {
  if( prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0) != 0 ) { return 1; }
  if( prctl(PR_GET_NO_NEW_PRIVS, 0, 0, 0, 0) != 1 ) { return 1; }
  return 0;
}
EOF
if ! $tgtcc -x c -o /tmp/nnp_c ${nnp_c} >/dev/null 2>&1; then
	echo "no"
    echo "ERROR: Failed to compile NO_NEW_PRIVS test"
    exit 2;
else
    if ! /tmp/nnp_c; then
        echo "ERROR: Kernel does not support NO_NEW_PRIVS. Updated Kernel is required."
        /bin/rm -f ${nnp_c} /tmp/nnp_c
        exit 2;
    else
	echo "yes"
	config_add_def SINGULARITY_NO_NEW_PRIVS 1
    fi
fi
/bin/rm -f ${nnp_c} /tmp/nnp_c

########################
# feature: MS_SLAVE
########################
printf " checking: feature: MS_SLAVE... "
if ! printf "#include <sys/mount.h>\n#ifndef MS_SLAVE\n#error failed\n#endif\nint main() { }" | \
   $tgtcc -x c -o /dev/null - >/dev/null 2>&1; then
	echo "no"
else
	echo "yes"
	config_add_def SINGULARITY_MS_SLAVE 1
fi

########################
# feature: MS_REC
########################
printf " checking: feature: MS_REC... "
if ! printf "#include <sys/mount.h>\n#ifndef MS_REC\n#error failed\n#endif\nint main() { }" | \
   $tgtcc -x c -o /dev/null - >/dev/null 2>&1; then
	echo "no"
	echo
	echo "This host does not support the MS_REC mount option!"
	echo
	exit 2
else
	echo "yes"
fi

########################
# feature: MS_PRIVATE
########################
printf " checking: feature: MS_PRIVATE... "
if ! printf "#include <sys/mount.h>\n#ifndef MS_PRIVATE\n#error failed\n#endif\nint main() { }" | \
   $tgtcc -x c -o /dev/null - >/dev/null 2>&1; then
	tgtstatic=0
	echo "no"
	echo
	echo "This host does not support the MS_PRIVATE mount option!"
	echo
	exit 2
else
	echo "yes"
fi

########################
# user capabilities
########################
printf " checking: user capabilities... "
if ! printf "#include <sys/prctl.h>\n#ifndef PR_CAP_AMBIENT\n#error failed\n#endif\nint main() { }" | \
   $tgtcc -x c -o /dev/null - >/dev/null 2>&1; then
	echo "no"
else
	echo "yes"
	config_add_def USER_CAPABILITIES 1
fi

########################
# linux/securebits.h
########################
printf " checking: header linux/securebits.h... "
if ! printf "#include <linux/securebits.h>\nint main() { }" | \
   $tgtcc -x c -o /dev/null - >/dev/null 2>&1; then
	echo "no"
else
	echo "yes"
	config_add_def SINGULARITY_SECUREBITS 1
fi

########################
# linux/capability.h
########################
printf " checking: header linux/capability.h... "
if ! printf "#include <linux/capability.h>\nint main() { }" | \
   $tgtcc -x c -o /dev/null - >/dev/null 2>&1; then
	echo "no"
	echo
	echo "linux/capability.h header not found, requires kernel headers installation."
	echo
	exit 2
else
	echo "yes"
fi

########################
# function setns
########################
printf " checking: function setns... "
symb=`nm -g \`$tgtcc --print-file-name=libc.a\` 2>/dev/null | awk '$2 == "T" && $3 == "setns" {print $3}'`
if [ "X$symb" = "Xsetns" ]; then
	echo "yes"
else
	echo "no"
	config_add_def SINGULARITY_NO_SETNS 1
	if ! test -d "/proc/self/ns"; then
		echo "WARNING: instance feature is disabled due to lack of kernel support"
		echo
	else
		config_add_def SINGULARITY_SETNS_SYSCALL 1
	fi
fi

########################
# libssl dev
########################
printf " checking: libssl+headers... "
if ! printf "#include <openssl/sha.h>\nint main() { }" | \
   $tgtcc -x c -o /dev/null -lcrypto - >/dev/null 2>&1; then
	tgtstatic=0
	echo "no"
	echo
	echo "Unable to find the libssl, need package openssl-devel (libssl-dev on Debian/Ubuntu)"
	echo
	exit 2
else
	echo "yes"
fi

########################
# libuuid dev
########################
printf " checking: libuuid+headers... "
if ! printf "#include <uuid/uuid.h>\nint main() { }" | \
   $tgtcc -x c -o /dev/null -luuid - >/dev/null 2>&1; then
	tgtstatic=0
	echo "no"
	echo
	echo "unable to find the libuuid, need package libuuid-devel (uuid-dev on Debian/Ubuntu)"
	echo
	exit 2
else
	echo "yes"
fi

########################
# libseccomp dev
########################
printf " checking: libseccomp+headers... "
if ! printf "#include <seccomp.h>\nint main() { }" | \
   $tgtcc -x c -o /dev/null -lseccomp - >/dev/null 2>&1; then
    tgtstatic=0
    echo "no"
else
    echo "yes"
    echo "WRAPPER_LIBS += -lseccomp" >> $makecond
    echo "go_TAG += seccomp" >> $makecond
fi

echo "INFO: userns and disable_suid are disabled. (mchecks/base.chk)"
