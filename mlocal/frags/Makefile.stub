# as go build already parallelize things, running make in parallel
# just slow down the whole process and we also requires to respect
# a specific order
.NOTPARALLEL:

all: $(ALL)

.PHONY: man
man: singularity
	mkdir -p $(DESTDIR)$(MANDIR)/man1
	$(V)$(GO) run $(GO_MODFLAGS) -tags "$(GO_TAGS)" $(GO_GCFLAGS) $(GO_ASMFLAGS) \
		$(SOURCEDIR)/cmd/docs/docs.go man --dir $(DESTDIR)$(MANDIR)/man1

.PHONY: collect
collect:
	@printf " DEPENDS\n"
	$(V)mkdir -p $(BUILDDIR)
	$(V):>$(BUILDDIR)/mergeddeps
	$(V)for i in `find $(BUILDDIR) -name '*.o.d'`; do		\
		(awk -v path="$${i%/*.*}" '/^.+:/ {			\
			print path "/" $$0; next }{ print }' < $$i	\
			>> $(BUILDDIR)/mergeddeps)			\
	done

.PHONY: check
check: codegen
	@echo " CHECK golangci-lint"
	$(V) cd $(SOURCEDIR) && \
		scripts/run-linter run --verbose --build-tags "$(GO_TAGS)" ./...
	@echo "       PASS"

.PHONY: dist
dist:
	$(V) if test -e '$(SOURCEDIR)/vendor' ; then \
		echo 'E: There is a vendor directory in $(SOURCEDIR).' ; \
		echo 'E: This is unexpected. Abort.' ; \
		exit 1 ; \
	fi
	$(V) cd $(SOURCEDIR) && $(GO) mod vendor
	$(V) cd $(SOURCEDIR) && $(SOURCEDIR)/scripts/make-dist.sh $(VERSION)
	$(V) rm -rf '$(SOURCEDIR)/vendor'

.PHONY: unit-test
unit-test: EXTRA_FLAGS := $(if $(filter yes,$(strip $(JUNIT_OUTPUT))),-junit $(BUILDDIR_ABSPATH)/unit-test.xml)
unit-test:
	@echo " TEST sudo go test [unit]"
	$(V)cd $(SOURCEDIR) && \
		scripts/go-test -sudo -v $(EXTRA_FLAGS) \
		./...
	@echo "       PASS"

.PHONY: short-unit-test
short-unit-test: EXTRA_FLAGS := $(if $(filter yes,$(strip $(JUNIT_OUTPUT))),-junit $(BUILDDIR_ABSPATH)/unit-test.xml)
short-unit-test:
	@echo " TEST sudo go test [unit]"
	$(V)cd $(SOURCEDIR) && \
		scripts/go-test -sudo -v -short $(EXTRA_FLAGS) \
		./...
	@echo "       PASS"


.PHONY: e2e-test
e2e-test: EXTRA_FLAGS := $(if $(filter yes,$(strip $(JUNIT_OUTPUT))),-junit $(BUILDDIR_ABSPATH)/e2e-test.xml)
e2e-test:
	@echo " TEST sudo go test [e2e]"
	$(V)rm -f $(BUILDDIR_ABSPATH)/e2e-cmd-coverage
	$(V)cd $(SOURCEDIR) && \
		SINGULARITY_E2E_COVERAGE=$(BUILDDIR_ABSPATH)/e2e-cmd-coverage \
		scripts/e2e-test -v $(EXTRA_FLAGS)
	@echo "       PASS"
	@echo " TEST e2e-coverage"
	$(V)cd $(SOURCEDIR) && \
		$(GO) run $(GO_MODFLAGS) -tags "$(GO_TAGS)" $(GO_GCFLAGS) $(GO_ASMFLAGS) \
			$(SOURCEDIR)/cmd/docs/cmds/cmdtree.go \
			-coverage $(BUILDDIR_ABSPATH)/e2e-cmd-coverage \
			-report $(BUILDDIR_ABSPATH)/e2e-cmd-report.txt

.PHONY: integration-test
integration-test:
	@echo " TEST sudo go test [integration]"
	$(V)cd $(SOURCEDIR) && \
		scripts/go-test -sudo -v -tags 'integration_test' \
		./cmd/singularity ./pkg/network
	@echo "       PASS"

.PHONY: short-integration-test
short-integration-test:
	@echo " TEST sudo go test [short-integration]"
	$(V)cd $(SOURCEDIR) && \
		scripts/go-test -sudo -v -tags 'integration_test' \
		./pkg/network
	@echo "       PASS"

.PHONY: action-test
action-test:
	@echo " TEST sudo go test [action]"
	$(V)cd $(SOURCEDIR) && \
		scripts/go-test -sudo -v -tags 'integration_test' \
		-run TestSingularityActions ./cmd/singularity \
		-args -skip-overlay
	@echo "       PASS"

.PHONY: test
test:
	@echo " TEST sudo go test [all]"
	$(V)M=0; eval 'while [ $$M -le 20 ]; do sleep 60; M=`expr $$M + 1`; echo "Still testing ($$M) ..."; done &' ; \
    	trap "kill $$! || true" 0; \
		cd $(SOURCEDIR) && \
		scripts/go-test -sudo -v -tags 'integration_test' \
		./...
	@echo "       PASS"

.PHONY: testall
testall: check test

.PHONY: rpm
rpm: dist
	@echo " BUILD RPM"
	$(V)(set -x; cd $(SOURCEDIR) && \
	  if [ -n "$(RPMPREFIX)" ]; then \
	    rpmbuild $(RPMCLEAN) -ta \
	      --define '_prefix $(RPMPREFIX)' \
	      --define '_sysconfdir $(RPMPREFIX)/etc' \
	      --define '_localstatedir $(RPMPREFIX)/var' \
	      --define '_mandir $(RPMPREFIX)/share/man' \
	      $(SOURCEDIR)/singularity-$(VERSION).tar.gz; \
	  else \
	    rpmbuild $(RPMCLEAN) -ta \
	      $(SOURCEDIR)/singularity-$(VERSION).tar.gz; \
	  fi)

.PHONY: cscope
cscope:
	@printf " CSCOPE\n"
	$(V)(cscope -k -R -q -u -b -v `find $(SOURCEDIR) -name '*.[chS]'` \
		>/dev/null 2>&1 || true)

.PHONY: clean
clean:
	@printf " CLEAN\n"
	$(V)rm -rf $(BUILDDIR)/mergeddeps cscope.* $(CLEANFILES)

.PHONY: install
install: $(INSTALLFILES)
	@echo " DONE"

-include $(BUILDDIR)/mergeddeps
