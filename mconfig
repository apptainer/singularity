#!/bin/sh -
# Copyright (c) 2016-2018, Yannick Cote <yanick@divyan.org>. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be found
# in the LICENSE file.
set -e

verbose=0
profile=release

hstcc=
hstcc_opts="cc gcc clang i686-w64-mingw32-gcc x86_64-w64-mingw32-gcc"
hstcxx=
hstcxx_opts="c++ g++ clang++ i686-w64-mingw32-g++ x86_64-w64-mingw32-g++"
hstar=
hstld=
hstranlib=
hstobjcopy=

tgtcc=
tgtcc_opts=$hstcc_opts
tgtcxx=
tgtcxx_opts=$hstcxx_opts
tgtar=
tgtld=
tgtranlib=
tgtobjcopy=

hststatic=0
tgtstatic=0

appsec=0

package_name=singularity
short_version=`(git describe --abbrev=0 --match 'v[0-9]*' --always 2>/dev/null || cat VERSION 2>/dev/null || echo "") | sed -e "s/^v//;s/-/_/g;s/_/-/;s/_/./g"`
package_version=`(git describe --match 'v[0-9]*' --dirty --always 2>/dev/null || cat VERSION 2>/dev/null || echo "") | sed -e "s/^v//;s/-/_/g;s/_/-/;s/_/./g"`
go_version="`grep -A 1 ^go: .travis.yml 2>/dev/null|sed -n 's/.*- "//;s/"//p'`"

prefix=
exec_prefix=
bindir=
sbindir=
libexecdir=
datarootdir=
datadir=
sysconfdir=
sharedstatedir=
localstatedir=
runstatedir=
includedir=
oldincludedir=
docdir=
infodir=
htmldir=
dvidir=
pdfdir=
psdir=
libdir=
localedir=
mandir=


usage () {
	echo "${0##*/}: could not complete configuration"
}

usage_args () {
	echo "Usage: ${0##*/}: [-vsS] [-P profile] [-b builddir] [-c hstcc] [-C tgtcc]"
	echo "                [-V version] [-x hstcxx] [-X tgtcxx]"
	echo "                [--INSTALLDIR=ARG (see below)]"
	echo
	echo "  Makeit general options:"
	echo "     -v   build project with verbose flags on"
	echo "     -s   build final host project binary statically"
	echo "     -S   build final target project binary statically"
	echo "     -P   use config profile to configure the project:"
	echo "            *release             normal release mode (production)"
	echo "             release-stripped    release mode, stripped symbols (rpm packaging)"
	echo "             debug               CGO objects built unoptimized, with symbols"
	echo "     -b   build project in \`builddir'"
	echo "     -c   build project with host C \`compiler'"
	echo "     -C   build project with target C\`compiler'"
	echo "     -V   build project with given version"
	echo "     -x   build project with host C++ \`compiler'"
	echo "     -X   build project with target C++ \`compiler'"
	echo "     -h   this help"
	echo
	echo "  Path modification options:"
	echo "     --prefix         install project in \`prefix'"
	echo "     --exec-prefix    install project executables in \`exec-prefix'"
	echo "     --bindir         install user executables in \`bindir'"
	echo "     --sbindir        install admin executables in \`sbindir'"
	echo "     --libexecdir     install program executables in \`libexecdir'"
	echo "     --datarootdir    install read-only rootdir data in \`datarootdir'"
	echo "     --datadir        install read-only data in \`datadir'"
	echo "     --sysconfdir     install read-only config files in \`sysconfdir'"
	echo "     --sharedstatedir install writable data in \`sharedstatedir'"
	echo "     --localstatedir  install writable config files in \`localstatedir'"
	echo "     --runstatedir    install writable per-process data in \`runstatedir'"
	echo "     --includedir     install header files in \`includedir'"
	echo "     --oldincludedir  install system header files in \`oldincludedir'"
	echo "     --docdir         install root documentation in \`docdir'"
	echo "     --infodir        install info documentation in \`infodir'"
	echo "     --htmldir        install html documentation in \`htmldir'"
	echo "     --dvidir         install dvi documentation in \`dvidir'"
	echo "     --pdfdir         install pdf documentation in \`pdfdir'"
	echo "     --psdir          install ps documentation in \`psdir'"
	echo "     --libdir         install libraries in \`libdir'"
	echo "     --localedir      install locale dependent data in \`localedir'"
	echo "     --mandir         install man documentation in \`mandir'"
	echo
}

# save the command line
cmdline="`pwd -P`/${0##*/} $*"

while [ $# -ne 0 ]; do
 case $1 in
  -p|--prefix*)
   if [ "$1" = "-p" ]; then
    if ! echo "$2" | sed -e '/^-.*/q2; /^$/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
    fi
    prefix=$2
    shift
   else
    if echo "$1" | sed -e '/^--prefix=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
    fi
    prefix=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   fi
   shift;;
  -e|--exec-prefix*)
   if [ "$1" = "-e" ]; then
    if ! echo "$2" | sed -e '/^-.*/q2; /^$/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
    fi
    exec_prefix=$2
    shift
   else
    if echo "$1" | sed -e '/^--exec-prefix=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
    fi
    exec_prefix=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   fi
   shift;;
  --bindir*)
   if echo "$1" | sed -e '/^--bindir=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   bindir=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   shift;;
  --sbindir*)
   if echo "$1" | sed -e '/^--sbindir=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   sbindir=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   shift;;
  --libexecdir*)
   if echo "$1" | sed -e '/^--libexecdir=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   libexecdir=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   shift;;
  --datarootdir*)
   if echo "$1" | sed -e '/^--datarootdir=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   datarootdir=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   shift;;
  --datadir*)
   if echo "$1" | sed -e '/^--datadir=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   datadir=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   shift;;
  --sysconfdir*)
   if echo "$1" | sed -e '/^--sysconfdir=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   sysconfdir=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   shift;;
  --sharedstatedir*)
   if echo "$1" | sed -e '/^--sharedstatedir=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   sharedstatedir=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   shift;;
  --localstatedir*)
   if echo "$1" | sed -e '/^--localstatedir=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   localstatedir=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   shift;;
  --runstatedir*)
   if echo "$1" | sed -e '/^--runstatedir=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   runstatedir=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   shift;;
  --includedir*)
   if echo "$1" | sed -e '/^--includedir=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   includedir=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   shift;;
  --oldincludedir*)
   if echo "$1" | sed -e '/^--oldincludedir=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   oldincludedir=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   shift;;
  --docdir*)
   if echo "$1" | sed -e '/^--docdir=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   docdir=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   shift;;
  --infodir*)
   if echo "$1" | sed -e '/^--infodir=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   infodir=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   shift;;
  --htmldir*)
   if echo "$1" | sed -e '/^--htmldir=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   htmldir=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   shift;;
  --dvidir*)
   if echo "$1" | sed -e '/^--dvidir=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   dvidir=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   shift;;
  --pdfdir*)
   if echo "$1" | sed -e '/^--pdfdir=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   pdfdir=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   shift;;
  --psdir*)
   if echo "$1" | sed -e '/^--psdir=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   psdir=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   shift;;
  --libdir*)
   if echo "$1" | sed -e '/^--libdir=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   libdir=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   shift;;
  --localedir*)
   if echo "$1" | sed -e '/^--localedir=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   localedir=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   shift;;
  --mandir*)
   if echo "$1" | sed -e '/^--mandir=.+*/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   mandir=`echo $1 | sed -e 's|.*\=\(.*\)|\1|'`
   shift;;
  -P)
   if ! echo "$2" | sed -e '/^-.*/q2; /^$/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   profile=$2; shift; shift;;
  -b)
   if ! echo "$2" | sed -e '/^-.*/q2; /^$/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   builddir="$2"; shift; shift;;
  -c)
   if ! echo "$2" | sed -e '/^-.*/q2; /^$/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   hstcc="$2"; shift; shift;;
  -C)
   if ! echo "$2" | sed -e '/^-.*/q2; /^$/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   tgtcc="$2"; shift; shift;;
  -x)
   if ! echo "$2" | sed -e '/^-.*/q2; /^$/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   hstcxx="$2"; shift; shift;;
  -X)
   if ! echo "$2" | sed -e '/^-.*/q2; /^$/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   tgtcxx="$2"; shift; shift;;
  -s)
   hststatic=1; shift;;
  -S)
   tgtstatic=1; shift;;
  -v)
   verbose=1; shift;;
  -V)
   if ! echo "$2" | sed -e '/^-.*/q2; /^$/q2' >/dev/null; then
     echo "error option requires an argument: $1"
     exit
   fi
   package_version="$2"; shift; shift;;
  -h) usage_args; exit 2;;
  --) shift; break;;
  ?) usage_args
     exit 2;;
  *) break;;
 esac
done
#
# non-option param
if [ $# != 0 ]; then
	usage_args
	exit 2
fi

# defaults paths
if [ -z "${prefix}" ]; then
	prefix=/usr/local
fi
if [ -z "${exec_prefix}" ]; then
	exec_prefix=${prefix}
fi
if [ -z "${bindir}" ]; then
	bindir=${exec_prefix}/bin
fi
if [ -z "${sbindir}" ]; then
	sbindir=${exec_prefix}/sbin
fi
if [ -z "${libexecdir}" ]; then
	libexecdir=${exec_prefix}/libexec
fi
if [ -z "${datarootdir}" ]; then
	datarootdir=${prefix}/share
fi
if [ -z "${datadir}" ]; then
	datadir=${datarootdir}
fi
if [ -z "${sysconfdir}" ]; then
	sysconfdir=${prefix}/etc
fi
if [ -z "${sharedstatedir}" ]; then
	sharedstatedir=${prefix}/com
fi
if [ -z "${localstatedir}" ]; then
	localstatedir=${prefix}/var
fi
if [ -z "${runstatedir}" ]; then
	runstatedir=${localstatedir}/run
fi
if [ -z "${includedir}" ]; then
	includedir=${prefix}/include
fi
if [ -z "${oldincludedir}" ]; then
	oldincludedir=/usr/include
fi
if [ -z "${docdir}" ]; then
	docdir=${datarootdir}/doc/${package_name}
fi
if [ -z "${infodir}" ]; then
	infodir=${datarootdir}/info
fi
if [ -z "${htmldir}" ]; then
	htmldir=${docdir}
fi
if [ -z "${dvidir}" ]; then
	dvidir=${docdir}
fi
if [ -z "${pdfdir}" ]; then
	pdfdir=${docdir}
fi
if [ -z "${psdir}" ]; then
	psdir=${docdir}
fi
if [ -z "${libdir}" ]; then
	libdir=${exec_prefix}/lib
fi
if [ -z "${localedir}" ]; then
	localedir=${datarootdir}/locale
fi
if [ -z "${mandir}" ]; then
	mandir=${datarootdir}/man
fi

if [ -z "$package_version" ]; then
	echo "error: unable to determine \$package_version variable"
	echo "NOTE: Not in a git tree and VERSION file not found"
	echo "NOTE: Try running mconfig with [-V version]"
	exit 2
fi
topdir=makeit
sourcedir=`pwd -P`
mfragsdir=$sourcedir/mlocal/frags
mchecksdir=$sourcedir/mlocal/checks

# config profile validation
case $profile in
	release);;
	release-stripped);;
	debug);;
	*) echo "$profile: no such config profile"
	   echo "       -P use config profile to configure the project:"
	   echo "           release             (DEFAULT) normal release mode (production)"
	   echo "           release-stripped    release mode, stripped symbols (rpm packaging)"
	   echo "           debug               C portion of CGO built unoptimized, with symbols"
	   exit 2;;
esac



#######################################################################
# System build tool configuration
#######################################################################
if [ -f $mchecksdir/basechecks.chk ]; then
	echo "=> running base system checks ..."
	. $mchecksdir/basechecks.chk
else
	echo "error: file $mchecksdir/basechecks.chk needs to be present"
	exit 2
fi



#######################################################################
# Extra user specified system configuration checks (mlocal/checks)
#######################################################################
# write a "#define" definition entry into $builddir/config.h
config_add_def ()
{
	if [ "$1" = "" -o "$2" = "" ]; then
		return
	fi
	echo "#define $*" >> $builddir/config.h
}

rm -rf $builddir/config.h
if [ -f $mchecksdir/project.chk ]; then
	echo "=> running project specific checks ..."
	. $mchecksdir/project.chk
fi



#######################################################################
# Generated fragments
#######################################################################
echo "=> generating fragments ..."
if [ ! -d $mfragsdir ]; then
	echo "error: $mfragsdir should be populated with Makefile fragments."
	echo "NOTE: Fragments may be copied from examples found in $topdir/examples/<project>/* "
	echo "NOTE: to $sourcedir/mlocal/* and tweak for your project."
	exit 2
fi


########################
# verbosity
########################
if [ "$verbose" = 1 ]; then
	echo "# build with verbose flag on" >> $genmk
	echo "V :=" >> $genmk
else
	echo "# silent build" >> $genmk
	echo "V := @" >> $genmk
fi
echo >> $genmk


########################
# build tools
########################
cat >> $genmk << EOF
# source/build locations
BUILDDIR := .
BUILDDIR_ABSPATH := `(cd $builddir && pwd -P || false)`
SOURCEDIR := $sourcedir
CONTRIBDIR := $contribdir
PREFIX := $prefix
EXECPREFIX := $exec_prefix
BINDIR := $bindir
SBINDIR := $sbindir
LIBEXECDIR := $libexecdir
DATAROOTDIR := $datarootdir
DATADIR := $datadir
SYSCONFDIR := $sysconfdir
SHAREDSTATEDIR := $sharedstatedir
LOCALSTATEDIR := $localstatedir
RUNSTATEDIR := $runstatedir
INCLUDEDIR := $includedir
OLDINCLUDEDIR := $oldincludedir
DOCDIR := $docdir
INFODIR := $infodir
HTMLDIR := $htmldir
DVIDIR := $dvidir
PDFDIR := $pdfdir
PSDIR := $psdir
LIBDIR := $libdir
LOCALEDIR := $localedir
MANDIR := $mandir

NAME := $package_name
SHORT_VERSION := $short_version
VERSION := $package_version

HOSTAR := $hstar
HOSTCC := $hstcc
HOSTCXX := $hstcxx
HOSTLD := $hstcc
HOSTRANLIB := $hstranlib
HOSTSIZE := size
HOSTOBJCOPY := $hstobjcopy

AR := $tgtar
CC := $tgtcc
CXX := $tgtcxx
LD := $tgtld
RANLIB := $tgtranlib
SIZE := size
OBJCOPY := $tgtobjcopy

ARCH := $tgt_arch

EOF


########################
# modules
########################
if [ "$host" = "unix" ]; then

:>$genconfdir/module.lst

found_modules=`(cat modules | awk '{ printf("%s ", $0) }') \
		2>/dev/null || true`
if [ "$found_modules" = "" ]; then
	found_modules=`find . -name '*.mconf' -print`
	if [ "$found_modules" = "" ]; then
		echo "error: no build modules found !"
		echo
		echo "You need to at least create one \`<module_name>.mconf' "
		echo "file describing either a program, a lib, or a set of"
		echo "objects to build."
		exit 2
	fi
fi
echo " found build modules:"
echo "CPPFLAGS :=" >> $genmk
# NOTE: parsed module (*.mconf) files only substitute var tgt_arch for now
for m in $found_modules; do
	mod=`eval echo ${m##*./}`
	modpath=`eval echo ${mod%/*}`
	if [ `(cd "$modpath" && pwd -P || false)` = $sourcedir ]; then
		modpath="."
	fi
	if [ ! -f $mod ]; then
		echo "error: module file \`$mod' not found!"
		exit 2
	fi

	echo "   +-> $mod"
	echo "$modpath `eval basename $mod`" >> $genconfdir/module.lst
	mkdir -p $genconfdir/$modpath
	cat $mod | awk -v tgt_arch=$tgt_arch '{ gsub(/tgt_arch/, \
				tgt_arch); print }' > $genconfdir/${mod}.parsed
#	echo "CPPFLAGS += -iquote\$(SOURCEDIR)/$modpath" >> $genmk
done
echo >> $genmk

# init LDFLAGS if static builds are supported
if [ "$hststatic" = "1" -a "$tgtstatic" = "1" ]; then
	echo "LDFLAGS := -static" >> $genmk
else
	echo "LDFLAGS :=" >> $genmk
fi
echo >> $genmk

cat >> $genmk << EOF
# make sure \`all' is the first rule
all:
EOF
fi

# call genmod.awk, generating Makefile components
$topdir/genmod.awk modfile=$genconfdir/module.lst \
	topdir=$sourcedir \
	host=$host \
	genconfdir=$genconfdir \
	tmpldir=$topdir/tmpl



#######################################################################
# Target Makefile
#######################################################################
drawline () {
	echo >> $output
	printf "# [ Embedding file : %50s ] #\n" $1 >> $output
	echo >> $output
}

echo "=> building Makefile ..."

:> $output
echo "#" >> $output
echo "# Non-recursive Makefile GENERATED by \`${0##*/}' -- `date`" >> $output
echo "# configured: $cmdline" >> $output
echo "#" >> $output

drawline $genmk
cat $genmk >> $output

if [ "$host" = "unix" ]; then
	drawline $mfragsdir/common_opts.mk
	cat $mfragsdir/common_opts.mk >> $output

	if [ "$appsec" = "1" ]; then
		drawline $mfragsdir/go_appsec_opts.mk
		cat $mfragsdir/go_appsec_opts.mk >> $output
	else
		drawline $mfragsdir/go_common_opts.mk
		cat $mfragsdir/go_common_opts.mk >> $output
	fi

	case $profile in
		release)
			drawline $mfragsdir/release_opts.mk
			cat $mfragsdir/release_opts.mk >> $output
			drawline $mfragsdir/go_normal_opts.mk
			cat $mfragsdir/go_normal_opts.mk >> $output
			;;
		release-stripped)
			drawline $mfragsdir/release_opts.mk
			cat $mfragsdir/release_opts.mk >> $output
			drawline $mfragsdir/go_stripped_opts.mk
			cat $mfragsdir/go_stripped_opts.mk >> $output
			;;
		debug)
			drawline $mfragsdir/debug_opts.mk
			cat $mfragsdir/debug_opts.mk >> $output
			drawline $mfragsdir/go_normal_opts.mk
			cat $mfragsdir/go_normal_opts.mk >> $output
			;;
	esac
fi

if [ -f "$mfragsdir/arch_${tgt_arch}_opts.mk" ]; then
	drawline $mfragsdir/arch_${tgt_arch}_opts.mk
	cat $mfragsdir/arch_${tgt_arch}_opts.mk >> $output
fi

drawline $genconfdir/modules.mk
cat $genconfdir/modules.mk >> $output

drawline $genconfdir/all.mk
cat $genconfdir/all.mk >> $output

if [ "$host" = "unix" ]; then
	drawline $mfragsdir/Makefile.stub
	# here, `depends' need to happen after all other rules; at the very end
	final_all=`cat $genconfdir/all.mk | awk 'BEGIN { FS="all: " } { print $2 }'`
	cat $mfragsdir/Makefile.stub | awk \
		"{ gsub(/^collect:/, \"collect: $final_all\"); print }" >> $output
else
	drawline $mfragsdir/Makefile.noruntime.stub
	cat $mfragsdir/Makefile.noruntime.stub >> $output
fi

rm -rf $genconfdir



#######################################################################
# Rpm spec for project package
#######################################################################

if [ "$host" = "unix" ]; then
	RPMSPEC=dist/rpm/singularity.spec
	echo "=> generating $RPMSPEC ..."
	rm -f $RPMSPEC
	VERSION="`echo "$package_version"|sed 's/-.*//'`"
	RELEASE="`echo "$package_version"|sed 's/[^-]*-//'`"
	if [ "$VERSION" = "$RELEASE" ]; then
    # $package_version has no dash
    RELEASE=1
	fi
	sed "s/@PACKAGE_VERSION@/$VERSION/;s/@PACKAGE_RELEASE@/$RELEASE/;s/@GO_VERSION@/$go_version/" $RPMSPEC.in >$RPMSPEC
fi

#######################################################################
# Configuration results
#######################################################################
echo "=> project setup with :"
echo "    - target arch: $tgt_arch"
echo "    - target compiler: $tgtcc"
echo "    - target wordsize: ${tgt_word}-bit"
echo "    - host arch: $hst_arch"
echo "    - host wordsize: ${hst_word}-bit"
echo "    - host system: $host"
echo "    - config profile: $profile"
if [ "$verbose" = 1 ]; then
	echo "    - verbose: yes"
else
	echo "    - verbose: no"
fi

echo "=> $builddir/Makefile ready, try:"
echo "   $ cd $builddir"
echo "   $ make"
