name: ci
on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'

jobs:
  check_go_mod:
    name: check_go_mod
    runs-on: ubuntu-20.04
    container: golang:1.16
    steps:
      - uses: actions/checkout@v2

      - name: Check go.mod
        run: ./scripts/check-go.mod

  lint_markdown:
    name: lint_markdown
    runs-on: ubuntu-20.04
    container: node:16-slim
    steps:
      - uses: actions/checkout@v2

      - name: Install markdownlint
        run: npm install -g markdownlint-cli

      - name: Check for Lint
        run: markdownlint .

  check_source:
    name: check_source
    runs-on: ubuntu-20.04
    container: golangci/golangci-lint:v1.41
    steps:
      - uses: actions/checkout@v2

      - name: Check singularity source
        run: |
          ./mconfig -v -p /usr/local
          make -C ./builddir check

  debian:
    name: debian
    runs-on: ubuntu-20.04
    container: golang:1.16-buster
    steps:
      - name: Fetch deps
        run: |
          apt-get -q update && apt-get -q install -y build-essential libssl-dev uuid-dev squashfs-tools cryptsetup-bin

      - uses: actions/checkout@v2

      - name: Build Singularity
        run: |
          ./mconfig -v -p /usr/local
          make -C ./builddir all

  alpine:
    name: alpine
    runs-on: ubuntu-20.04
    container: golang:1.16-alpine
    steps:
      - name: Fetch deps
        run: apk add -q --no-cache git alpine-sdk automake libtool linux-headers libarchive-dev util-linux-dev libuuid openssl-dev gawk sed cryptsetup

      - uses: actions/checkout@v2

      - name: Build Singularity
        run: |
          ./mconfig -v -p /usr/local
          make -C ./builddir all

  oldgo:
    name: oldgo
    runs-on: ubuntu-20.04
    # match the minimum version required by mconfig
    container: golang:1.16-alpine
    steps:
      - name: Fetch deps
        run: apk add -q --no-cache git alpine-sdk automake libtool linux-headers libarchive-dev util-linux-dev libuuid openssl-dev gawk sed cryptsetup

      - uses: actions/checkout@v2

      - name: Build Singularity
        run: |
          ./mconfig -v -p /usr/local
          make -C ./builddir all

  rpmbuild-centos7:
    runs-on: ubuntu-20.04
    name: rpmbuild-centos7
    steps:
      - uses: actions/checkout@v2

      - name: Build and test rpm under docker
        env:
          OS_TYPE: centos
          OS_VERSION: 7
          # setting GO_ARCH speeds things by using binaries instead of source
          GO_ARCH: linux-amd64
        run: ./scripts/ci-docker-run

  rpmbuild-rocky8:
    runs-on: ubuntu-20.04
    name: rpmbuild-rocky8
    steps:
      - uses: actions/checkout@v2

      - name: Build and test rpm under docker
        env:
          OS_TYPE: rockylinux/rockylinux
          OS_VERSION: 8
          GO_ARCH: linux-amd64
        run: ./scripts/ci-docker-run

  short_unit_tests:
    name: short_unit_tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.7

      - name: Fetch deps
        run: sudo apt-get install -y build-essential squashfs-tools libseccomp-dev cryptsetup

      - name: Build and install Singularity
        run: |
          ./mconfig -v -p /usr/local
          make -C ./builddir all && sudo make -C ./builddir install

      - name: Run unit tests
        run: make -C ./builddir short-unit-test

  integration_tests:
    name: integration_tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.7

      - name: Fetch deps
        run: sudo apt-get install -y build-essential squashfs-tools libseccomp-dev cryptsetup

      - name: Build and install Singularity
        run: |
          ./mconfig -v -p /usr/local
          make -C ./builddir all && sudo make -C ./builddir install

      - name: Run integration tests
        run: make -C ./builddir integration-test

  e2e_tests:
    name: e2e_tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Get git tags
        run: git fetch --prune --unshallow --tags --force

      - name: Check changes
        env:
          PROJECT_REPOSITORY: ${{ github.repository }}
          PROJECT_PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          rc=0
          ./scripts/should-e2e-run "${PROJECT_REPOSITORY}" "${GITHUB_REF##*/}" "${PROJECT_PR_NUMBER}" || rc=$?
          case $rc in
            0)
              echo "Verifying critical changes"
              echo "run_tests=true" >> $GITHUB_ENV ;;
            1)
              echo "No critical changes, skipping tests" ;;
            *)
              echo "E: ./scripts/should-e2e-run returned with exit code $rc. Abort."
              exit $rc ;;
          esac

      - name: Setup Go
        if: env.run_tests
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.7

      - name: Fetch deps
        if: env.run_tests
        run: sudo apt-get install -y build-essential squashfs-tools libseccomp-dev cryptsetup

      - name: Build and install Singularity
        if: env.run_tests
        run: |
          ./mconfig -v -p /usr/local
          make -C ./builddir all && sudo make -C ./builddir install

      - name: Run E2E tests
        if: env.run_tests
        env:
          E2E_PARALLEL: 8
        run: make -C ./builddir e2e-test

      - name: Upload artifacts
        if: env.run_tests
        uses: actions/upload-artifact@v2
        with:
          name: e2e-artifact
          path: builddir/e2e-cmd-report.txt
          retention-days: 7

  check_pkg_no_buildcfg:
    name: check_pkg_no_buildcfg
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.7

      - name: Check pkg/... doesn't depend on buildcfg
        run: |
          if go list -f '{{.Deps}}' ./pkg/... | grep -q buildcfg
          then
            echo "Prohibited buildcfg dependency found in pkg/:"
            echo
            go list -f '{{.ImportPath}} - {{.Deps}}' ./pkg/... | grep buildcfg
            exit 1
          fi
